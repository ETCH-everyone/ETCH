# ~/app/nginx/conf.d/default.conf (blue/green deploy 추가 적용 버전)

# Upstream 서버 그룹 정의
upstream blue-frontend-server {
    server frontend-blue:3000;
}
upstream green-frontend-server {
    server frontend-green:3000;
}
upstream blue-business-servers {
    server business-server-blue:8081;
}
upstream green-business-servers {
    server business-server-green:8081;
}
upstream batch_servers {
    server batch-server:8082;
}
upstream chat_servers {
    server chat-server:8083;
}
upstream recommend_servers {
    server recommend-server:8084;
}

# -----------------------------------------------------------------
# HTTP (80) 서버: 모든 요청을 HTTPS로 리디렉션
# -----------------------------------------------------------------
server {
    listen 80;
    server_name etch.it.kr www.etch.it.kr;

    # Let's Encrypt 인증서 갱신을 위한 경로
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # 그 외 모든 HTTP 요청은 HTTPS로 리디렉션
    location / {
        return 301 https://$host$request_uri;
    }
}

# -----------------------------------------------------------------
# HTTPS (443) 서버: 실제 서비스 처리
# -----------------------------------------------------------------
server {
    listen 443 ssl;
    server_name etch.it.kr www.etch.it.kr;
    # 업로드 파일 크기 제한 (버퍼링 경고 방지)
    client_max_body_size 20M;

    # SSL 인증서 경로 설정
    ssl_certificate /etc/letsencrypt/live/etch.it.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/etch.it.kr/privkey.pem;

    # 보안 강화를 위한 SSL 프로토콜 및 암호화 스위트 설정 (권장)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    # --- 프록시 공통 헤더 설정 ---
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # blue-green 설정 파일
    include /etc/nginx/conf.d/blue-green-business-server.inc;
    include /etc/nginx/conf.d/blue-green-frontend.inc;

    # 백엔드가 생성하는 리디렉션 주소의 http를 https로 변경해줍니다.
    proxy_redirect http:// $scheme://;

    # /minio/etch/이미지파일.png 와 같은 요청을 처리합니다.
    location /minio/ {
        proxy_pass http://minio:9000/;
        proxy_set_header Host minio:9000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /minio-console/ {
        proxy_pass http://minio:9001/;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;

        # --- 웹소켓 연결을 위한 설정 ---
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Kibana 대시보드 경로
    location /kibana/ {
        # Kibana 컨테이너의 5601 포트로 요청을 전달합니다.
        proxy_pass http://kibana:5601/;
        proxy_set_header Host $host;
        proxy_redirect off;

        # 웹소켓 연결을 위한 설정
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # 그라파나 대시보드 경로 ---
    # /grafana/ 로 시작하는 모든 요청을 그라파나 컨테이너의 3000번 포트로 전달합니다.
    location /grafana/ {
        proxy_set_header Host $http_host;
        proxy_pass http://grafana:3000/;
    }

    # Business-Server로 가는 모든 location에 rewrite 규칙 추가

    location /oauth2/ {
        proxy_pass $target_business_server_upstream;
    }
    location /login/oauth2/code/google {
        proxy_pass $target_business_server_upstream;
    }
    # [swagger] /v3/로 직접 들어오는 잘못된 요청을 /api/v1/ 경로로 다시 보내주는 규칙
    location /v3/api-docs {
        # 요청을 /api/v1/v3/api-docs... 로 재작성하고,
        # Nginx가 location 블록을 처음부터 다시 찾도록 합니다.
        # 이렇게 하면 아래의 location /api/v1/ 블록이 이어서 처리하게 됩니다.
        rewrite ^/v3/api-docs(.*)$ /api/v1/v3/api-docs$1 last;
    }
    location /api/v1/ {
        # 요청 URI에서 '/api/v1' 부분을 제거하고 뒷부분($1)만 남깁니다.
        rewrite ^/api/v1/(.*)$ /$1 break;

        # Spring Boot Actuator 등에서 Prefix를 인식하도록 헤더를 추가합니다.
        proxy_set_header X-Forwarded-Prefix /api/v1;

        # 가공된 URI를 Blue/Green 타겟으로 전달합니다.
        proxy_pass $target_business_server_upstream;
    }

    location /api/batch/ {
        proxy_pass http://batch_servers/;
    }

    location /api/chat/ {
        proxy_pass http://chat_servers/;

        # 필수 헤더들 추가
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket 지원
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /api/recommend/ {
        proxy_pass http://recommend_servers/;
    }

    # 최상위 경로 (프론트엔드)
    location / {
        proxy_pass $target_frontend_upstream;
    }
}
